********
Data Loaders
********

Data sources
##############

The polar_route implements a variety of data-loaders to enable working with a 
number of open-source datasets. Links to download some of these datasets and 
there implemented data-loaders are provided in the table below.

+------------------------+------------+---------+----------------------------------------------------------------------------+---------------------+
| Data Type              | Data Name  | Source  | Download                                                                   | Data_loader         |
+========================+============+=========+============================================================================+=====================+
| Sea Ice Concentration  | SIC        | AMSR2   | https://seaice.uni-bremen.de/data/amsr2/asi_daygrid_swath/s6250/netcdf/    | load_amsr_folder    |
+------------------------+------------+---------+----------------------------------------------------------------------------+---------------------+
| Bathymetry             | Elevation  | GEBCO   | https://download.gebco.net/                                                | load_gebco          |
+------------------------+------------+---------+----------------------------------------------------------------------------+---------------------+
| Currents               | uC, vC     | SOSE    | ...                                                                        | load_sose_currents  |
+------------------------+------------+---------+----------------------------------------------------------------------------+---------------------+
|                        |            |         |                                                                            |                     |
+------------------------+------------+---------+----------------------------------------------------------------------------+---------------------+
|                        |            |         |                                                                            |                     |
+------------------------+------------+---------+----------------------------------------------------------------------------+---------------------+



Overview
##############

In this section we discuss functions for loading data into the PolarRoute Mesh.
Data can be added to the Mesh using the *.add_data_points()* function of the Mesh.
This function takes a single argument, a dataframe containing datapoints in a
EPSG:4326 projection. The format in which dataframe must be given is:

+-----+------+------+---------+-----+---------+
| Lat | Long | Time | value_1 | ... | value_n |
+=====+======+======+=========+=====+=========+
| ... | ...  | ...  | ...     | ... | ...     |
+-----+------+------+---------+-----+---------+
|     |      |      |         |     |         |
+-----+------+------+---------+-----+---------+

The data loaders provided collect or create data from heterogeneous data sources
and transform them into the correct format for use by the *.add_data_points()*
function of the Mesh.

Data loader functions located in the file **./polar_route/data_loaders.py** can
be referenced in a configuration file and called in the initialisation of the Mesh.
See the :ref:`Configuration` section of this document for further details. 



.. automodule:: polar_route.data_loaders
    :members:


********
Mesh Construction
********

Overview
##############

Throughout this section we will outline the use case for the Discrete Meshing of the environment. The two main classes used are `Mesh` and `CellBox`, with a Mesh being composed of a series of CellBox objects.

A general overview of the method can be seen below:

.. figure:: ./Figures/FlowDiagram_MeshGraph.png
    :align: center
    :width: 700

    Overview figure of the Discrete Meshing from the multi-data input.


CellBox
##############

.. automodule:: polar_route.cellbox

.. autoclass:: polar_route.cellbox.CellBox
   :special-members: __init__
   :members: getcx, getcy, getdcx, getdcy, get_data_points, get_value, get_bounds, add_data_points, add_splitting_condition, value_should_be_split, value_hom_condition, hom_condition, should_split, split, contains_point, to_json

Mesh
##############

.. automodule:: polar_route.Mesh

.. autoclass:: polar_route.mesh.Mesh 
   :special-members: __init__  
   :members: add_data_points, get_cellbox, get_cellboxes, get_neighbour_case, split_and_replace, split_to_depth, to_json



********
Vessel Specifics
********

Overview
##############

All of the functionality that relates to the specific vehicle traversing our meshed environment model is contained within the vessel_performance module.
This module contains a `VesselPerformance` class that determines which cells in the mesh are inaccessible for that particular vessel and what its performance will be in each of the accessible cells.

.. figure:: ./Figures/Mesh_Fuel_Speed.jpg
    :align: center
    :width: 700

    Maps of the sea ice concentration (a), speed (b) and fuel consumption (c) across the Weddell Sea.
    The latter two quantities are derived from the former.




Vessel Performance
##############

.. automodule:: polar_route.vessel_performance

.. autoclass:: polar_route.vessel_performance.VesselPerformance
   :special-members: __init__
   :members: to_json


********
Route Planner
********

Overview
##############

In this section we will outline the construction of the route paths using the Mesh construction corrected to include the objective functions define and generated in the earlier section.


RoutePlanner
##############

.. automodule:: polar_route.route_planner
   :members: 


.. Crossing Points
.. ##############

.. .. automodule:: polar_route.crossing
..    :members:

.. .. autoclass:: polar_route.crossing.NewtonianDistance
..    :members:
   
.. .. autoclass:: polar_route.crossing.NewtonianCurve
..    :members:


